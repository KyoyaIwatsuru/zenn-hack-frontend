name: Vercel Deployment Monitor

on:
  schedule:
    # 5分ごとに実行
    - cron: "*/5 * * * *"
  push:
    branches: [main]
  workflow_dispatch: # 手動実行を許可

env:
  # Vercel設定
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  # Discord Webhook
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  monitor-deployment:
    name: Monitor Vercel Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Monitor Deployment Status
        id: monitor
        run: |
          # Vercel APIを使って最新のデプロイメント情報を取得
          DEPLOYMENT_JSON=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v6/deployments?projectId=$VERCEL_PROJECT_ID&limit=1")

          echo "Raw deployment data: $DEPLOYMENT_JSON"

          # デプロイメント情報を解析
          DEPLOYMENT_ID=$(echo $DEPLOYMENT_JSON | jq -r '.deployments[0].uid // empty')
          DEPLOYMENT_STATE=$(echo $DEPLOYMENT_JSON | jq -r '.deployments[0].readyState // empty')
          DEPLOYMENT_URL=$(echo $DEPLOYMENT_JSON | jq -r '.deployments[0].url // empty')
          DEPLOYMENT_CREATED=$(echo $DEPLOYMENT_JSON | jq -r '.deployments[0].createdAt // empty')
          DEPLOYMENT_TARGET=$(echo $DEPLOYMENT_JSON | jq -r '.deployments[0].target // empty')
          COMMIT_SHA=$(echo $DEPLOYMENT_JSON | jq -r '.deployments[0].meta.githubCommitSha // empty')
          COMMIT_MESSAGE=$(echo $DEPLOYMENT_JSON | jq -r '.deployments[0].meta.githubCommitMessage // empty')

          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "deployment_state=$DEPLOYMENT_STATE" >> $GITHUB_OUTPUT
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "deployment_created=$DEPLOYMENT_CREATED" >> $GITHUB_OUTPUT
          echo "deployment_target=$DEPLOYMENT_TARGET" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

          # エラー状態をチェック
          if [ "$DEPLOYMENT_STATE" = "ERROR" ] || [ "$DEPLOYMENT_STATE" = "CANCELED" ]; then
            echo "error_detected=true" >> $GITHUB_OUTPUT
            
            # エラーログを取得
            ERROR_LOGS=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" \
              "https://api.vercel.com/v2/deployments/$DEPLOYMENT_ID/events" | \
              jq -r '.events[] | select(.type == "stderr" or .type == "error") | .payload.text' | \
              head -20 | sed 's/$/\\n/' | tr -d '\n')
            
            echo "error_logs<<EOF" >> $GITHUB_OUTPUT
            echo "$ERROR_LOGS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "error_detected=false" >> $GITHUB_OUTPUT
          fi

          # 成功かどうかをチェック
          if [ "$DEPLOYMENT_STATE" = "READY" ]; then
            echo "success_detected=true" >> $GITHUB_OUTPUT
          else
            echo "success_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Error Notification to Discord
        if: steps.monitor.outputs.error_detected == 'true'
        run: |
          DEPLOYMENT_ID="${{ steps.monitor.outputs.deployment_id }}"
          DEPLOYMENT_STATE="${{ steps.monitor.outputs.deployment_state }}"
          DEPLOYMENT_URL="${{ steps.monitor.outputs.deployment_url }}"
          COMMIT_SHA="${{ steps.monitor.outputs.commit_sha }}"
          COMMIT_MESSAGE="${{ steps.monitor.outputs.commit_message }}"
          ERROR_LOGS="${{ steps.monitor.outputs.error_logs }}"

          # エラーログを最初の1000文字に制限
          ERROR_LOGS_TRUNCATED=$(echo "$ERROR_LOGS" | cut -c1-1000)

          # Discordに送信するJSONペイロードを作成
          DISCORD_PAYLOAD=$(cat <<EOF
          {
            "embeds": [
              {
                "title": "🚨 Vercel デプロイメントエラー",
                "description": "デプロイメントでエラーが発生しました",
                "color": 15158332,
                "fields": [
                  {
                    "name": "📍 状態",
                    "value": "$DEPLOYMENT_STATE",
                    "inline": true
                  },
                  {
                    "name": "🔗 デプロイメントID",
                    "value": "[$DEPLOYMENT_ID](https://vercel.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/$DEPLOYMENT_ID)",
                    "inline": true
                  },
                  {
                    "name": "🌐 URL",
                    "value": "https://$DEPLOYMENT_URL",
                    "inline": false
                  },
                  {
                    "name": "💬 コミットメッセージ",
                    "value": "$COMMIT_MESSAGE",
                    "inline": false
                  },
                  {
                    "name": "🔍 コミットSHA",
                    "value": "[$COMMIT_SHA](https://github.com/${{ github.repository }}/commit/$COMMIT_SHA)",
                    "inline": true
                  },
                  {
                    "name": "📝 エラーログ",
                    "value": "\`\`\`\n$ERROR_LOGS_TRUNCATED\n\`\`\`",
                    "inline": false
                  }
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
                "footer": {
                  "text": "Vercel Deployment Monitor"
                }
              }
            ]
          }
          EOF
          )

          # DiscordのWebhookに送信
          curl -H "Content-Type: application/json" \
            -d "$DISCORD_PAYLOAD" \
            "$DISCORD_WEBHOOK_URL"

      - name: Send Success Notification to Discord
        if: steps.monitor.outputs.success_detected == 'true' && github.event_name == 'push'
        run: |
          DEPLOYMENT_ID="${{ steps.monitor.outputs.deployment_id }}"
          DEPLOYMENT_URL="${{ steps.monitor.outputs.deployment_url }}"
          COMMIT_SHA="${{ steps.monitor.outputs.commit_sha }}"
          COMMIT_MESSAGE="${{ steps.monitor.outputs.commit_message }}"

          # Discordに送信するJSON ペイロードを作成
          DISCORD_PAYLOAD=$(cat <<EOF
          {
            "embeds": [
              {
                "title": "✅ Vercel デプロイメント成功",
                "description": "デプロイメントが正常に完了しました",
                "color": 5763719,
                "fields": [
                  {
                    "name": "📍 状態",
                    "value": "READY",
                    "inline": true
                  },
                  {
                    "name": "🔗 デプロイメントID",
                    "value": "[$DEPLOYMENT_ID](https://vercel.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/$DEPLOYMENT_ID)",
                    "inline": true
                  },
                  {
                    "name": "🌐 URL",
                    "value": "https://$DEPLOYMENT_URL",
                    "inline": false
                  },
                  {
                    "name": "💬 コミットメッセージ",
                    "value": "$COMMIT_MESSAGE",
                    "inline": false
                  },
                  {
                    "name": "🔍 コミットSHA",
                    "value": "[$COMMIT_SHA](https://github.com/${{ github.repository }}/commit/$COMMIT_SHA)",
                    "inline": true
                  }
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
                "footer": {
                  "text": "Vercel Deployment Monitor"
                }
              }
            ]
          }
          EOF
          )

          # DiscordのWebhookに送信
          curl -H "Content-Type: application/json" \
            -d "$DISCORD_PAYLOAD" \
            "$DISCORD_WEBHOOK_URL"
